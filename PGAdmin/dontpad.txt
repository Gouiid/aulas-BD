CREATE TABLE categoria(codigo_categoria serial PRIMARY KEY,
					  nome VARCHAR(30));
					  
INSERT INTO categoria (nome) VALUES('Eletrônicos'),
								   ('Alimentos'),
								   ('Perfumaria'),
								   ('Farmácia'),
								   ('Eletrodomésticos'),
								   ('Game');	
								   
SELECT * FROM categoria;


create extension unaccent;
SELECT * FROM categoria WHERE unaccent(nome) LIKE unaccent('%ma%') ;



CREATE TABLE produto (codigo_produto SERIAL PRIMARY KEY,
					 nome VARCHAR(40)NOT NULL, descricao TEXT,
					 preco NUMERIC CHECK (preco > 0)NOT NULL,
					 quantidade_estoque SMALLINT DEFAULT 0,
					 codigo_categoria SMALLINT,
					  FOREIGN KEY (codigo_categoria)REFERENCES categoria(codigo_categoria));			 

INSERT INTO PRODUTO (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Arroz','Tio João',7.5,40,2);
INSERT INTO PRODUTO (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Feijão','Carreteiro',8.5,30,2);
INSERT INTO PRODUTO (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Feijão','Granfino',8.5,30,2);
INSERT INTO PRODUTO (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Macarrão','Adria',6.65,10,2);
INSERT INTO PRODUTO (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Farinha de Trigo','Boa Sorte',2.5,8,2);
INSERT INTO PRODUTO (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Sal','Cisne',2.5,100,2);
INSERT INTO PRODUTO (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Atum','Gomes da Costa',6.8,42,2);
INSERT INTO PRODUTO (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Leite Condensado','Nestle',5.9,40,2);
INSERT INTO PRODUTO (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Creme de Leite','Pirancajuba',2.8,15,2);
INSERT INTO PRODUTO (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Arroz','Carreteiro',7.5,4,2);
INSERT INTO PRODUTO (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Neosoro','EMS',17.5,4,1);






create table marca(codigo_marca serial primary key, descricao varchar(50));



create table modelo (codigo_modelo serial primary key , 
					descricao varchar (50), preco numeric check ( preco>60000),
					 codigo_marca smallint, foreign key (codigo_marca)
					 references marca(codigo_marca));




insert into modelo (descricao,preco,codigo_marca) values('Gol',70000,7);
insert into modelo (descricao,preco,codigo_marca) values('HB20',72000,1);
insert into modelo (descricao,preco,codigo_marca) values('HB20S',76000,1);
insert into modelo (descricao,preco,codigo_marca) values('Cerato',76200,5);
insert into modelo (descricao,preco,codigo_marca) values('Ka',73500,2);
insert into modelo (descricao,preco,codigo_marca) values('ECO SPORT',94500,2);
insert into modelo (descricao,preco,codigo_marca) values('SIENA',65000,6);



insert into marca (nome) values ('hyundai'),
                                 ('ford'),
                                 ('renault'),
                                 ('nissan'),
                                 ('kia'),
                                 ('fiat'),
                                  ('vw');


select mo.descricao, ma.nome, mo.preco from modelo as mo, marca as ma 
WHERE ma.codigo_marca = mo.codigo_marca
AND ma.nome = 'Hyundai' AND mo.preco > 73000
ORDER BY preco DESC











CREATE TABLE cliente (codigo_cliente SERIAL PRIMARY KEY, nome VARCHAR(50)NOT NULL,
					email VARCHAR(40)NOT NULL UNIQUE, tipo CHAR CHECK (tipo = 'F' or tipo='J'),
					data_nascimento DATE);



INSERT INTO cliente (nome,email,tipo,data_nascimento) VALUES('Marina','m@gmail.com','F','2000-02-10');
INSERT INTO cliente (nome,email,tipo,data_nascimento) VALUES('XPTO 123','x@gmail.com','J',null);
INSERT INTO cliente (nome,email,tipo,data_nascimento) VALUES('Adriano','a@gmail.com','F','2001-01-11');
INSERT INTO cliente (nome,email,tipo,data_nascimento) VALUES('ABC LTDA','abc@gmail.com','J',null);
INSERT INTO cliente (nome,email,tipo,data_nascimento) VALUES('Marcos','ma@gmail.com','F','1998-01-14');




https://sqliteonline.com/


CREATE TABLE cliente (codigo_cliente int AUTO_INCREMENT PRIMARY KEY,nome varchar(30) NOT NULL, telefone varchar(11), email varchar(30) NOT NULL UNIQUE,
					   cpf varchar(11), cnpj varchar(14), razao_social varchar(40),
						tipo_cliente char);

INSERT INTO cliente (codigo_cliente,nome, telefone, email, cpf, cnpj, razao_social,tipo_cliente)
					  VALUES(1,'Ana','2422452232','ana@gmail.com','72345678901',null,null,'F');

INSERT INTO cliente (codigo_cliente,nome, telefone, email, cpf, cnpj, razao_social,tipo_cliente)
					  VALUES(2,'Pão de Açúcar','2122352232','extra@gmail.com',null,'12345678901234','Extra LTDA','J');

INSERT INTO cliente (codigo_cliente,nome, telefone, email, cpf, cnpj, razao_social,tipo_cliente)
					  VALUES(3,'Joana','2422482232','joana@yahoo.com.br','42345678901',null,null,'F');


INSERT INTO cliente (codigo_cliente,nome, telefone, email, cpf, cnpj, razao_social,tipo_cliente)
					  VALUES(4,'Joaquim','2422473232','joaquim@yahoo.com.br','72345678901',null,null,'F');

INSERT INTO cliente (codigo_cliente,nome, telefone, email, cpf, cnpj, razao_social,tipo_cliente)
					  VALUES(5,'Gilberto','2422492232','gilberto@hotmail.com','22345678901',null,null,'F');

INSERT INTO cliente (codigo_cliente,nome, telefone, email, cpf, cnpj, razao_social,tipo_cliente)
					  VALUES(6,'Loja da Esquina','3122352232','loja@gmail.com',null,'22345678901237','XPTO Comercio LTDA','J');

SELECT * from cliente;





CREATE TABLE editora (codigo_editora INT AUTO_INCREMENT PRIMARY KEY,
	nome VARCHAR(30));
INSERT INTO  editora (nome) VALUES('Vozes'),
				  ('Ciência Moderna'),
				  ('Saraiva'),
                                 ('Campus');	





CREATE TABLE livro (isbn varchar(10) PRIMARY KEY, autor varchar(30), quantidade_estoque INT,
 preco decimal not NULL, codigo_editora int,
FOREIGN KEY(codigo_editora) REFERENCES editora(codigo_editora));



CREATE TABLE livro (isbn varchar(10) PRIMARY KEY, autor varchar(30), quantidade_estoque INT,
 preco decimal not NULL, codigo_editora int,
FOREIGN KEY(codigo_editora) REFERENCES editora(codigo_editora));


INSERT INTO livro (isbn,autor,quantidade_estoque,preco,codigo_editora) VALUES('32222','Rui Barbosa',10,45.5,1);
INSERT INTO livro (isbn,autor,quantidade_estoque,preco,codigo_editora) VALUES('12345','José de Vasconcelos',10,29.3,2);
INSERT INTO livro (isbn,autor,quantidade_estoque,preco,codigo_editora) VALUES('31111','Laercio',10,90.5,3);
INSERT INTO livro (isbn,autor,quantidade_estoque,preco,codigo_editora) VALUES('34451','Ana Rita',10,88.25,2);
INSERT INTO livro (isbn,autor,quantidade_estoque,preco,codigo_editora) VALUES('22232','Rui dos Santos',10,49.5,1);
INSERT INTO livro (isbn,autor,quantidade_estoque,preco,codigo_editora) VALUES('12332','Alberto da Silva',10,55.60,3);



CREATE TABLE compra(numero_nota int PRIMARY KEY, data_compra date,
codigo_cliente int,FOREIGN KEY(codigo_cliente)
REFERENCES cliente(codigo_cliente));





INSERT INTO compra (numero_nota,data_compra,codigo_cliente) VALUES(12,'2024-02-04',1);
INSERT INTO compra (numero_nota,data_compra,codigo_cliente) VALUES(13,'2024-01-02',2);
INSERT INTO compra (numero_nota,data_compra,codigo_cliente) VALUES(122,'2024-01-04',1);
INSERT INTO compra (numero_nota,data_compra,codigo_cliente) VALUES(121,'2024-01-05',3);

create table carrinho (numero_nota int , isbn varchar(10),
quantidade int, valor_compra decimal, desconto decimal,
primary key (numero_nota, isbn),
foreign key (numero_nota) references compra (numero_nota),
foreign key (isbn) references livro (isbn));





INSERT INTO carrinho(numero_nota,isbn,quantidade,valor_compra,desconto) VALUES(12,'12345',10,29.3,0);
INSERT INTO carrinho(numero_nota,isbn,quantidade,valor_compra,desconto) VALUES(12,'31111',2,90.5,0);
INSERT INTO carrinho(numero_nota,isbn,quantidade,valor_compra,desconto) VALUES(121,'12345',3,29.3,0);
INSERT INTO carrinho(numero_nota,isbn,quantidade,valor_compra,desconto) VALUES(121,'32222',4,45.5,0);


LISTAR O LIVRO MAIS CARO?
select isbn, autor, max(preco) FROM livro;

LISTAR O LIVRO MAIS BARATO?
select isbn, autor, MIN(preco) FROM livro;

TOTAL DA COMPRA (CARRINHO) NUMERO_NOTA 121?
select SUM(valor_compra) FROM carrinho WHERE numero_nota = 121;

ATUALIZAR A QUANTIDADE EM ESTOQUE(ENTRADA DE 10 LIVROS)
DO LIVRO DE ISBN 12345

UPDATE livro set quantidade_estoque = quantidade_estoque + 10 

WHERE isbn = '12345';








select c.nome, sum(p.quantidade_estoque)from produto as p, categoria as c
	WHERE p.codigo_categoria = c.codigo_categoria
	group by c.nome
	HAVING c.nome = 'Alimentos';








INSERT INTO produto (nome, descricao, preco, quantidade_estoque,codigo_categoria) c('Creme de Leite','Itambé',2.8,25,null);
INSERT INTO produto (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Arroz','Princesa',6.5,44,null);
INSERT INTO produto (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Colírio','EMS',22.5,30,null);
INSERT INTO produto (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('Celular','Samsung',2221.5,10,1);
INSERT INTO produto (nome, descricao, preco, quantidade_estoque,codigo_categoria) VALUES('TV','Samsung',1200,1,1);






/*select p.codigo_produto, p.nome, c.nome
from produto as p,categoria as c 
where p.codigo_categoria = c.codigo_categoria
*/
select p.codigo_produto, p.nome, c.nome from produto as p 
left join categoria as c 
on p.codigo_categoria = c.codigo_categoria;





/*select p.codigo_produto, p.nome, c.nome  
from produto as p, categoria as c
WHERE p.codigo_categoria = c.codigo_categoria
*/
/*select p.codigo_produto, p.nome, c.nome from produto as p
INNER JOIN categoria as c
on p.codigo_categoria = c.codigo_categoria;
*/

/*select p.codigo_produto, p.nome, c.nome from produto as p
LEFT JOIN categoria as c
on p.codigo_categoria = c.codigo_categoria;
*/
/*select p.codigo_produto, p.nome, c.nome from produto as p
RIGHT JOIN categoria as c
on p.codigo_categoria = c.codigo_categoria;
*/
UPDATE produto SET codigo_categoria=4  WHERE codigo_produto = 11;


/*select p.codigo_produto, p.nome, c.nome
from produto as p,categoria as c 
where p.codigo_categoria = c.codigo_categoria
*/

/*
select p.codigo_produto, p.nome, c.nome from produto as p 
right join categoria as c 
on p.codigo_categoria = c.codigo_categoria;
*/
update produto set codigo_categoria =4 where codigo_produto =11;
select p.codigo_produto, p.nome, c.nome from produto as p 
full join categoria as c 
on p.codigo_categoria = c.codigo_categoria;
	






insert into modelo (descricao,preco,codigo_marca) values('X8',358000,null);
insert into modelo (descricao,preco,codigo_marca) values('Argo',93200,6);
insert into modelo (descricao,preco,codigo_marca) values('Kronos',98460,6);
insert into modelo (descricao,preco,codigo_marca) values('Pulse',105000,6);
insert into modelo (descricao,preco,codigo_marca) values('Creta',103000,1);








1) Listar o modelo e nome da marca dos carros somente com marca cadastrada
SELECT mo.descricao, ma.nome FROM  modelo mo
INNER JOIN  marca ma
ON mo.codigo_marca = ma.codigo_marca;

2) Listar o preço médio dos carros
SELECT ROUND(AVG(preco),2) from modelo;

3) Listar a quantidade total de carros com uma marca cadastrada
SELECT COUNT(*) FROM  modelo mo
INNER JOIN  marca ma
ON mo.codigo_marca = ma.codigo_marca;

4) Listar todos os carros inclusive os sem marca
SELECT mo.descricao, ma.nome FROM  modelo mo
LEFT JOIN  marca ma
ON mo.codigo_marca = ma.codigo_marca;

5) Listar a quantidade de carros (modelos) da marca Fiat
SELECT count(*) FROM  modelo mo
WHERE mo.codigo_marca=6

6) Exibir o carro mais barato
7) Atualizar o preço do modelo HB20S em 10% do valor atual
set preco = preco * 1.10
 

select * from marca where marca.codigo_marca not in
(select MO.CODIGO_MARCA from modelo as mo 
inner join marca as m
on mo.codigo_marca = m.codigo_marca
 );








create view view_marca_modelo as
select modelo.descricao, marca.nome from modelo, marca
where modelo.codigo_marca = marca.codigo_marca;














------------------------------------------------12-03-2024-------------------------------------------------





CREATE TABLE banco(numero INT PRIMARY KEY, agencia VARCHAR(10),
				  nome VARCHAR(10));




INSERT INTO banco (numero,agencia,nome) VALUES(1234,'401-1','Bradesco');
INSERT INTO banco (numero,agencia,nome) VALUES(1247,'304-3','Itaú');
INSERT INTO banco (numero,agencia,nome) VALUES(4678,'101-1','Santander');
INSERT INTO banco (numero,agencia,nome) VALUES(1222,'211-2','Caixa');
INSERT INTO banco (numero,agencia,nome) VALUES(2345,'104-1','B.Brasil');




CREATE TABLE conta (numero_conta int PRIMARY KEY, titular VARCHAR(40),
				   saldo NUMERIC, numero int,
				   FOREIGN KEY (numero) REFERENCES banco(numero)
				  ON UPDATE CASCADE
				  ON DELETE CASCADE);



INSERT INTO conta (numero_conta,titular,saldo,numero) VALUES
(122,'Jorge Antônio',9500,1234),
(121,'Ana Silvia',1500,1247),
(222,'Mariana',200,1222),
(322,'Roberta',600,1234);


SELECT * FROM conta
INNER JOIN banco
ON conta.numero = banco.numero



/*DELETE FROM banco WHERE numero = 1222;

UPDATE banco set numero = '1447' WHERE numero=1247;
*/
SELECT * FROM conta;


1) CONTAR O NÚMERO DE CONTAS DO BRADESCO
SELECT COUNT(*) FROM banco WHERE numero=1234;

2) MOSTRAR O MAIOR SALDO DE UMA CONTA
SELECT MAX(saldo) FROM conta;

3) MOSTRAR A MÉDIA DE SALDO DAS CONTAS
SELECT ROUND(AVG(saldo),2) FROM conta;



-----------------------------------Exercício-----------------------------------------------

UMA IMOBILIÁRIA VENDE DIVERSOS IMÓVEIS E UM IMÓVEL PODE 
SER VENDIDO POR UMA DETERMINADA IMOBILIÁRIA. 

CRIAR O MODELO CONCEITUAL E LÓGICO
IMPLEMENTAR O MODELO FÍSICO.

NA VENDA DO IMÓVEL A IMOBILIÁRIA RECEBERA O VALOR
DE COMISSÃO. NA VENDA DO IMÓVEL DEVERÁ FICAR 
REGISTRADO O GASTO COM LAUDÊMIO 2,5% E 2% DE ITBI.

Imóvel: id_imovel, descricao, tipo, valor
Imobiliária: id_imobiliaria, nome, comissao

-----------------------------------------------------------------------------------------------------
create table imobiliaria (id_imobiliaria serial primary key, 
						  nome varchar(50)
						  );

create table imovel (id_imovel serial primary key,
				     descricao varchar(90),
				     tipo varchar(30),
				     valor decimal);

create table venda (id_venda serial primary key,
				   id_imobiliaria int,
				   	foreign key (id_imobiliaria) references imobiliaria(id_imobiliaria),
				    comissao decimal,
					id_imovel int,
				   	foreign key (id_imovel) references imovel(id_imovel),
					ITBI decimal,
					Laudemio decimal
				   );*/

/*INSERT INTO imobiliaria (nome) VALUES
('Casa Ideal Imobiliária'),
('Terra Nova Imobiliária'),
('Soluções Imobiliárias'),
('Sonho Real Imobiliária'),
('Espaço & Lar Imobiliária'),
('Vision Imobiliária'),
('Primeiro Lar Imobiliária'),
('Castelo dos Sonhos Imobiliária'),
('Imóveis Prestige'),
('Novo Horizonte Imobiliária');*/

/*INSERT INTO imovel (descricao, tipo, valor) VALUES
    ('Apartamento com vista para o mar', 'Apartamento', 350000),
    ('Casa com jardim espaçoso', 'Casa', 450000),
    ('Terreno próximo ao centro da cidade', 'Terreno', 150000),
    ('Cobertura com piscina privativa', 'Apartamento', 750000),
    ('Sobrado em condomínio fechado', 'Casa', 550000),
    ('Terreno com vista panorâmica', 'Terreno', 200000),
    ('Apartamento mobiliado no centro', 'Apartamento', 280000),
    ('Casa térrea com churrasqueira', 'Casa', 380000),
    ('Terreno em área residencial', 'Terreno', 100000),
    ('Apartamento duplex com varanda', 'Apartamento', 420000);*/
	
/*INSERT INTO venda (id_imobiliaria, comissao, id_imovel, ITBI, Laudemio)
	select imo.id_imobiliaria, i.valor * 5/100, i.id_imovel, i.valor * 2/100, i.valor * 2.5/100 
		from imovel i, imobiliaria imo 
			where i.id_imovel = 1 and imo.id_imobiliaria = 1;*/







CREATE TABLE empregado (id_empregado SERIAL PRIMARY KEY,
					   nome VARCHAR(50) NOT NULL,
					   sobrenome VARCHAR(40) NOT NULL,
					   email VARCHAR(30) NOT NULL UNIQUE,
					   cargo VARCHAR(30),
					   salario NUMERIC NOT NULL);


INSERT INTO empregado (nome,sobrenome,email,cargo,salario)
VALUES('Maria','Silva','maria@gmail.com','Programadora',6400),
('Jorge','Santos','jorge@gmail.com','Aux. Adm.',3200),
('Ana','Oliveira','ana@gmail.com','Arquiteta',9300),
('Renato','Nascimento','renato@gmail.com','Eng. Civil',8900);




create trigger atualizar_salario
after update
on empregado
for each row
execute procedure empregado_atualizar_salario();